#TicTacToe

import random

def drawBoard(board): 
    print(board[7] + '|' + board[8] + '|' + board[9]) 
    print('-+-+-') 
    print(board[4] + '|' + board[5] + '|' + board[6]) 
    print('-+-+-') 
    print(board[1] + '|' + board[2] + '|' + board[3]) 

def inputPlayerLetter():
    letter = '' 
    #Asks the player for their letter
    while not (letter == "X" or letter == "O"): 
        print('Do you want to be X or O?') 
        letter = input().upper() 

    if letter == "X": 
        return ['X','O'] #first is players letter, player picks X
    else:
        return ['O','X'] #player picks O

def whoGoesFirst():
    if random.randint(0, 1) == 0: 
        return 'Computer' #if the random number is 0, computer goes
    else: 
        return 'Player' #if the random number is 1, player goes


def makeMove(board, letter, move):
    board[move] = letter #updates the board list with a letter in referance to a move

def isWinner(winnerBoard, winnerLetter): #checks if anyone one with the different possible combinations
    return (
        (winnerBoard[7] == winnerLetter and winnerBoard[8] == winnerLetter and winnerBoard[9] == winnerLetter) or
        (winnerBoard[4] == winnerLetter and winnerBoard[5] == winnerLetter and winnerBoard[6] == winnerLetter) or
        (winnerBoard[1] == winnerLetter and winnerBoard[2] == winnerLetter and winnerBoard[3] == winnerLetter) or
        (winnerBoard[7] == winnerLetter and winnerBoard[4] == winnerLetter and winnerBoard[1] == winnerLetter) or
        (winnerBoard[7] == winnerLetter and winnerBoard[4] == winnerLetter and winnerBoard[1] == winnerLetter) or
        (winnerBoard[8] == winnerLetter and winnerBoard[5] == winnerLetter and winnerBoard[2] == winnerLetter) or
        (winnerBoard[9] == winnerLetter and winnerBoard[6] == winnerLetter and winnerBoard[3] == winnerLetter) or
        (winnerBoard[7] == winnerLetter and winnerBoard[5] == winnerLetter and winnerBoard[3] == winnerLetter) or
        (winnerBoard[9] == winnerLetter and winnerBoard[5] == winnerLetter and winnerBoard[1] == winnerLetter) 
    )

def getBoardCopy(board): #makes a copy for the computer to do things
    boardCopy = []

    for i in board: 
        boardCopy.append(i) #puts any space of i into the boardCopy array

    return boardCopy

def isSpaceFree(board, move):   #checks if a space is free
    return board[move] == ' '

def getPlayerMove(board):
    move = ' '
    while move not in '1 2 3 4 5 6 7 8 9'.split() or not isSpaceFree(board, int(move)):
        print('What is your next move? 1-9')
        move = input()
    return int(move) 

def chooseRandomMove(board, movesList):
    possibleMoves = [] 
    for i in movesList: #for i in the given spaces, check if it is free, if free add it to possiblemoves list
        if isSpaceFree(board, i): 
            possibleMoves.append(i) 

    if len(possibleMoves) != 0: #if there are posssible moves (after making the list)
        return random.choice(possibleMoves) #choose a random possible move
    else: 
        return None 

def getComputerMove(board, computerLetter):

    if computerLetter == 'X': #assigins player's letter
        playerLetter == 'O'
    else:
        playerLetter == 'X'

    for i in range(1,10): 
        boardCopy = getBoardCopy(board) #making the copy of a board
        if isSpaceFree(boardCopy, i):
            makeMove(boardCopy, computerLetter, i)
            if isWinner(boardCopy, computerLetter): #seeing if the computer is the winner
                return i

    for i in range (1,10):
        boardCopy = getBoardCopy(board)
        if isSpaceFree(boardCopy, i):
            makeMove(boardCopy, playerLetter, i)
            if isWinner(boardCopy, playerLetter): #seeing if the player is the winner
                return i
    
    move = chooseRandomMove(board, [1, 3, 7, 9])
    if move != None: #if there are corner spaces available choose a corner space
        return move

    if isSpaceFree (board, 5): #if the center is availabe choose center
        return 5

    return chooseRandomMove(board, [2, 4, 6, 8]) #other wise choose something else

def isBoardFull(board):
    for i in range(1, 10): #if i is possible in one of the board pieces, then the board is not full
        if isSpaceFree(board, i): #checking if i is free
            return False
    return True

print('Welcome to Tic-Tac-Toe')

while True:
    theBoard = [' '] * 10 #reset board 

    playerLetter, computerLetter = inputPlayerLetter() #assining letters

    turn = whoGoesFirst() #telling who goes first
    print(turn + ' goes first')
    gameIsPlaying = True

    while gameIsPlaying:
        if turn == 'Player':
            drawBoard(theBoard)
            move = getPlayerMove(theBoard)
            makeMove(theBoard, playerLetter, move)

            if isWinner(theBoard, playerLetter):
                drawBoard(theBoard)
                print('Congrats, you have won!')
                gameIsPlaying = False
            else:
                if isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print('The game is a tie!')
                    break
                else:
                    turn = 'Computer'

        else:
            move = getComputerMove(theBoard, computerLetter)
            makeMove(theBoard, computerLetter, move)

            if isWinner(theBoard, computerLetter):
                drawBoard(theBoard)
                print('Sorry, you lost!')
                gameIsPlaying = False
            else:
                if isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print('The game is a tie!')
                    break
                else:
                    turn = 'Player'

    print('Do you wish to try again?')
    if not input().lower().startswith('y'):
        break


